"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""
from memory_profiler import profile


@profile
def create_list():
    lst = []
    for i in range(100000):
        lst.append(i)
    return lst


@profile
def create_gen():
    gen = (i for i in range(100000))
    return gen


create_list()
create_gen()

# Line #    Mem usage    Increment  Occurrences   Line Contents
# =============================================================
#     36     15.9 MiB     15.9 MiB           1   @profile
#     37                                         def create_list():
#     38     15.9 MiB      0.0 MiB           1       lst = []
#     39     18.1 MiB      0.0 MiB      100001       for i in range(100000):
#     40     18.1 MiB      2.2 MiB      100000           lst.append(i)
#     41     18.1 MiB      0.0 MiB           1       return lst

# Line #    Mem usage    Increment  Occurrences   Line Contents
# =============================================================
#     44     16.0 MiB     16.0 MiB           1   @profile
#     45                                         def create_gen():
#     46     16.0 MiB      0.0 MiB           1       gen = (i for i in range(100000))
#     47     16.0 MiB      0.0 MiB           1       return gen

# применение генератора вместо больших списков позволяет экономить память