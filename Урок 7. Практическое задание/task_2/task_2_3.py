"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.

Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.

Решите задачу тремя способами:

3) с помощью встроенной функции поиска медианы

сделайте замеры на массивах длиной 10, 100, 1000 элементов

В конце сделайте аналитику какой трех из способов оказался эффективнее
"""

from statistics import median
from random import randint
from timeit import timeit

m = 5
data_10 = [randint(0, 1000) for i in range(2 * m + 1)]
m = 50
data_100 = [randint(0, 1000) for i in range(2 * m + 1)]
m = 500
data_1000 = [randint(0, 1000) for i in range(2 * m + 1)]

def mediana(data):
    return median(data)

print(timeit(stmt='mediana(data_10)', number=1000, globals=globals()))
print(timeit(stmt='mediana(data_100)', number=1000, globals=globals()))
print(timeit(stmt='mediana(data_1000)', number=1000, globals=globals()))

# поиск медианы с сортировкой списка гномьей сортировкой
# 10 - 0.0005795999999999996
# 100 - 0.00549079999999999
# 1000 - 21.490038000000002

# поиск медианы путем удаления максимальных элементов
# 10 - 0.0007191000000000003
# 100 - 0.02860059999999999
# 1000 - 2.7775874

# встроенная функция поиска медианы:
# 10 - 0.001622300000000007
# 100 - 0.01145539999999999
# 1000 - 0.1711306

# замеры показывают следующую картину:
# в поиске медианы для небольших списков наименьшее время показывает первый вариант - поиск медианы с применением
# гномьей сортировки, но на больших списках это очень медленный вариант
# в поиске медианы для больших списков вне конкуренции встроенная функция поиска медианы из модуля statistics
